#!/usr/bin/env bash

# Set strict mode if inside a script.
if [ -n "${BASH_SOURCE[0]:-}" ]; then
	set -euo pipefail
fi

AWS_CREDENTIALS_PATH="${HOME}/.aws/credentials"
SSO_PROFILE=${AWS_PROFILE:-default}

echo "Using aws profile $SSO_PROFILE for sso config"

echo "performing aws cli sso login, expect a browser window to open"
aws sso login --profile $SSO_PROFILE

echo "Fetching missing values via 'aws sts'"
SSO_ROLE=$(aws sts get-caller-identity --query=Arn --profile "$SSO_PROFILE" | cut -d'_' -f 2)
SSO_ACCOUNT=$(aws sts get-caller-identity --query=Account --output text --profile "$SSO_PROFILE")
SESSION_FILE=$(find ~/.aws/sso/cache -type f -regex ".*/cache/[a-z0-9]*.json" | head -n 1)
SSO_ACCESS_TOKEN=$(jq -r '.accessToken' "$SESSION_FILE")

echo "Requesting temporary access credentials via 'aws sso get-role-credentials'"
CREDENTIALS=$(aws sso get-role-credentials --role-name="$SSO_ROLE" --account-id="$SSO_ACCOUNT" --access-token="$SSO_ACCESS_TOKEN")

AWS_ACCESS_KEY_ID=$(echo "$CREDENTIALS" | jq -r '.roleCredentials.accessKeyId')
AWS_SECRET_ACCESS_KEY=$(echo "$CREDENTIALS" | jq -r '.roleCredentials.secretAccessKey')
AWS_SESSION_TOKEN=$(echo "$CREDENTIALS" | jq -r '.roleCredentials.sessionToken')


echo "Setting new credentials via 'aws configure' for default profile"
aws --profile default configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
aws --profile default configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
aws --profile default configure set aws_session_token ${AWS_SESSION_TOKEN}
